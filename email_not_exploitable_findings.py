import requests
from requests.auth import HTTPBasicAuth
import xmltodict
import json
import sys
import os
import smtplib
import urllib3
urllib3.disable_warnings()
from email.message import EmailMessage
 
# -----------------------------------------------------------------------------
def error(resp):
    print("Error - " + str(resp.status_code) + " :\n" + resp.text)
    sys.exit(-1)
# -----------------------------------------------------------------------------
def exit(str):
    print ("EXITING: " + str)
    sys.exit(-1)

# ----------------------------------------------------------------------------- 
def get_oauth2_token(user, passwd):
    oauth2_data = {
        "username": user,
        "password": passwd,
        "grant_type": "password",
        "scope": "sast_rest_api",
        "client_id": "resource_owner_client",
        "client_secret": "014DF517-39D1-4453-B7B3-9930C563627C"
    }

    oauth2_response = requests.post(endpointServer + "/auth/identity/connect/token", data=oauth2_data, verify=False)
    if oauth2_response.status_code == 200:
        return oauth2_response.json()['access_token']
    else:
        return False

# ----------------------------------------------------------------------------- 
def get_projects():
	headers = {
		"Authorization": "Bearer " + authToken,
		"Accept": "application/json;v=1.0"
	}
	project_data = {
	}

	project_response = requests.get(endpointServer + "/projects", headers=headers, data=project_data, verify=False)
	if project_response.status_code == 200:
		return project_response.json()
	else:
		return False
# ----------------------------------------------------------------------------- 
def get_last_scan(projectId):
    headers = {
        "Authorization": "Bearer " + authToken,
        "Accept": "application/json;v=1.0"
    }
    project_data = {
    	"projectId":projectId,
		"scanStatus":"Finished",
		"last":5
    }

    project_response = requests.get(endpointServer + "/sast/scans?last=1&scanStatus=Finished&projectId=" + projectId, headers=headers,  verify=False)
    if project_response.status_code == 200:
        return project_response.json()
    else:
        return False
# -----------------------------------------------------------------------------
def generate_report(scanId):
	headers = {
		"Authorization": "Bearer " + authToken
	}
	report_request_data = {
		"reportType": "XML",
		"scanId": scanId
	}
	new_scan_report_response = requests.post(endpointServer + "/reports/sastScan", headers=headers, data=report_request_data, verify=False)
	if new_scan_report_response.status_code == 202:
		report = new_scan_report_response.json()
		reportId = str(report["reportId"])
		status = "InProcess"
		past_status = status

		while status != "Created":
			get_report_status_response = requests.get(endpointServer + report["links"]["status"]["uri"], headers=headers, verify=False)
			if get_report_status_response.status_code == 200:
				status = get_report_status_response.json()["status"]["value"]
				if past_status != status:
					past_status = status
			else:
				return error(get_report_status_response)
      
		get_report_response = requests.get(endpointServer + report["links"]["report"]["uri"], headers=headers, verify=False)
		if get_report_response.status_code == 200:
			return get_report_response.text
		else:
			return error(get_report_response)
	else:
		return error(new_scan_report_response)
# -----------------------------------------------------------------------------
def parse_xml(doc):
	msg = ""

	if doc and 'CxXMLResults' in doc:
		xml_results = doc['CxXMLResults']

		if xml_results and 'Query' in xml_results:
			for query in xml_results['Query']:
				results = query['Result']

				list_results = []
				if isinstance(results, list):
					list_results = results
				else:
					list_results.append(results)

				for result in list_results:

					if (result["@state"] == "4"):

						# proposed not exploitable found

						# create string
						msg = "\nProposed Not Exploitable marked\n"
						msg += "Project: " + doc['CxXMLResults']["@ProjectName"] + "\n"
						msg += "Team: " + doc['CxXMLResults']["@Team"] + "\n"
						msg += "Link: " + result["@DeepLink"] + "\n"

	return (msg) 
# -----------------------------------------------------------------------------
def send_email(subject, message):
	usernameEmail = os.getenv('CHECKMARX_SMTP_FROM_EMAIL')
	smtpServer = os.getenv('CHECKMARX_SMTP_SERVER')
	toEmail = os.getenv('CHECKMARX_SMTP_TO_EMAIL')
	smtpPasswd = os.getenv ('CHECKMARX_SMTP_PASSWORD')

	msg = EmailMessage()
	msg.set_content(message)

	msg['Subject'] = subject
	msg['From'] = usernameEmail
	msg['To'] = toEmail

	s = smtplib.SMTP(smtpServer)
	s.starttls()
	s.login(usernameEmail, smtpPasswd)
	s.send_message(msg)
	s.quit()
# -----------------------------------------------------------------------------
if __name__ == '__main__':
	server = sys.argv[1]
	user = os.getenv('CHECKMARX_USER')
	passwd = os.getenv('CHECKMARX_PASS')

	msgBody = ""
    
	endpointServer = server + "/cxrestapi"

	authToken = get_oauth2_token(user, passwd)
	if authToken:            
        
		# get a list of all the projects
		projects = get_projects()

		# go through all the projects
		for project in projects:

            # get the project id
			jsonstr = get_last_scan(str(project['id']))

			for jst in jsonstr:
				scanId = jst["id"]
			
				#generate and wait for report to be created
				xml = generate_report(scanId)
 
				if xml:
					document = xmltodict.parse(xml, force_list={'Query'})
					msgBody += parse_xml(document)
	else:
		exit ("Error getting authorization")

	print (msgBody)
	send_email("Checkmarx: Proposed Not Exploitable", msgBody)
