
import xmltodict
import time
import json
import sys
import os
import smtplib
import urllib3
urllib3.disable_warnings()
from email.message import EmailMessage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

from CheckmarxPythonSDK.CxRestAPISDK import TeamAPI
from CheckmarxPythonSDK.CxRestAPISDK import ProjectsAPI
from CheckmarxPythonSDK.CxRestAPISDK import ScansAPI
 
# -----------------------------------------------------------------------------
def parse_xml(doc):
    body_msg = ""
    csv_msg = ""

    if doc and 'CxXMLResults' in doc:
        xml_results = doc['CxXMLResults']

        if xml_results and 'Query' in xml_results:
            for query in xml_results['Query']:
                results = query['Result']

                list_results = []
                if isinstance(results, list):
                    list_results = results
                else:
                    list_results.append(results)

                for result in list_results:

                    if (result["@state"] == "4"):
                        # proposed not exploitable found

                        # create string

                        csv_msg += "proposed not exploitable," + doc['CxXMLResults']["@ProjectName"] + "," + doc['CxXMLResults']["@Team"] + "," + result["@DeepLink"] + "\n"

                        body_msg += "\nProposed Not Exploitable marked\n"
                        body_msg += "Project: " + doc['CxXMLResults']["@ProjectName"] + "\n"
                        body_msg += "Team: " + doc['CxXMLResults']["@Team"] + "\n"
                        body_msg += "Link: " + result["@DeepLink"] + "\n"    
                    elif (result["@state"] == "1"):
                        # proposed not exploitable found

                        # create string
                        csv_msg += "not exploitable," + doc['CxXMLResults']["@ProjectName"] + "," + doc['CxXMLResults']["@Team"] + "," + result["@DeepLink"] + "\n"

                        body_msg += "\nNot Exploitable marked\n"
                        body_msg += "Project: " + doc['CxXMLResults']["@ProjectName"] + "\n"
                        body_msg += "Team: " + doc['CxXMLResults']["@Team"] + "\n"
                        body_msg += "Link: " + result["@DeepLink"] + "\n"

    return (csv_msg, body_msg)
# -----------------------------------------------------------------------------
def send_email(subject, message, file):
    usernameEmail = os.getenv('CHECKMARX_SMTP_FROM_EMAIL')
    smtpServer = os.getenv('CHECKMARX_SMTP_SERVER')
    toEmail = os.getenv('CHECKMARX_SMTP_TO_EMAIL')
    smtpPasswd = os.getenv ('CHECKMARX_SMTP_PASSWORD')

    msg = EmailMessage()
    msg.set_content(message)

    msg['Subject'] = subject
    msg['From'] = usernameEmail
    msg['To'] = toEmail
    
    msg.add_attachment(file.read(), filename="not_exploitable.csv")

    s = smtplib.SMTP(smtpServer)
    s.starttls()
    s.login(usernameEmail, smtpPasswd)
    s.send_message(msg)
    s.quit()
# -----------------------------------------------------------------------------
if __name__ == '__main__':

    projects_api = ProjectsAPI()
    scan_api = ScansAPI()

    csvBody = "status,project name,team,deep link\n"
    msgBody = ""

    # get a list of all the projects
    projects = projects_api.get_all_project_details()

    # go through all the projects
    for project in projects:

    	# can't call ''
        last_scans = scan_api.get_all_scans_for_project(project.project_id, "Finished", 1)

        scan_id = last_scans[0].id

        scan_report = scan_api.register_scan_report(scan_id, "XML")
        if scan_report and scan_report.report_id:
            while not scan_api.is_report_generation_finished(scan_report.report_id):
                time.sleep(1)

            report_content = scan_api.get_report_by_id(scan_report.report_id)

            if report_content:
                document = xmltodict.parse(report_content, force_list={'Query'})

                if document:
                    cBody, mBody = parse_xml(document)
                    msgBody += mBody
                    csvBody += cBody
	
    #print (msgBody)

    file = open ("results.csv", "w+")
    file.write (csvBody)

    file.seek(0)

    send_email("Checkmarx: Proposed Not Exploitable", msgBody, file)

    file.close ()
